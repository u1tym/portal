バックエンドに、serviceというディレクトリを作って、その中に、Accountというクラスを作って、

Accountクラスは
、
静的メソッド ユーザ存在チェック
引数 ユーザ名
戻り値 存在しているか否かの結果
処理 当該ユーザ名が存在しているか

コンストラクタ
引数 ユーザ名
処理 ユーザID、パスワード、遷移先URLを保持

メソッド キー値生成
引数 なし
戻り値 キー値
処理 キー値を生成して、セッション管理テーブルにレコードを追加
     キー値を生成できない場合は、NULLを返す

メソッド 認証
引数 キー値、ハッシュ値
戻り値 正常か異常か
処理 セッション管理情報に該当レコードがないときは異常
     保持しているパスワードと引数のキー値でハッシュ値を算出し、引数のハッシュ値と一致しているか
     不一致時は異常
     一致している場合は、ランダム文字列を生成し、セッション文字列として、セッション管理テーブルを更新
     セッション文字列を保持

メソッド セッション文字列取得
引数 なし
戻り値 セッション文字列

メソッド 遷移先URL取得
引数 なし
戻り値 遷移先URL

を作って、それらを使用するようにして



スケジュール管理のDBに以下のテーブルを作成して管理したい。

schedules
id                   serial                         プライマリキー
user_id              integer                        ユーザID
title                character varying              タイトル
is_all_day           boolean                        終日フラグ
start_datetime       timestamp(6) without time zone 開始日時
duration             integer                        期間（終日の場合は、単位は日／終日ではない場合は、単位は分）
activity_category_id integer                        カテゴリID
schedule_type        character varying              スケジュールタイプ
location             character varying              場所
details              text                           詳細
is_todo_completed    boolean                        TODO完了フラグ
is_deleted           boolean                        削除フラグ
created_at           timestamp(6) without time zone 作成日時
updated_at           timestamp(6) without time zone 更新日時

activity_categories
id                   serial                         プライマリキー
user_id              integer                        ユーザID
name                 character varying              名称
is_deleted           boolean                        削除フラグ
created_at           timestamp(6) without time zone 作成日時
updated_at           timestamp(6) without time zone 更新日時


－－－
ScheduleView.vueに、機能の骨組みを実装して欲しい
以下の値を保持
表示対象年月日
表示開始年月日
表示終了年月日
表示モード（日曜始まり月表示／月曜始まり月表示／週３日表示）

以下の関数を作成
・表示開始年月日算出
　表示モードが日曜始まり月表示の場合
　表示対象開始年月の1日が日曜ならば、その日。日曜ではない場合には、過去の直近の日曜日
　表示モードが月曜始まり月表示の場合
　表示対象開始年月の1日が月曜ならば、その日。月曜ではない場合には、過去の直近の月曜日
　表示モードが週３日表示の場合
　表示開始年月日は、表示対象年月日

・表示終了年月日算出
　表示モードが日曜始まり月表示の場合
　表示対象開始年月日の末尾が土曜ならば、その日。土曜ではない場合には、そのあとの直近の土曜日。
　表示モードが月曜始まり月表示の場合
　表示対象開始年月日の末尾が日曜ならば、その日。日曜ではない場合には、そのあとの直近の日曜日。
　表示モードが週３日表示の場合
　表示終了年月日は、表示対象年月日＋2日

表示モードは日曜始まり月表示
表示対象年月のデフォルトは、現在月
表示開始年月日のデフォルトは、表示開始年月日算出で算出
表示終了年月日のデフォルトは、表示終了年月日算出で算出

暫定で以下を表示しておく
前へボタン
次へボタン
表示切替ボタン
表示モード
表示開始年月日
表示終了年月日

前へボタン押下時
　表示モードが日曜始まり月表示の場合
　表示対象年月日を１か月前の同日にする。同日が存在しない場合には、１か月前の末日にする。
　表示モードが月曜始まり月表示の場合
　表示対象年月日を１か月前の同日にする。同日が存在しない場合には、１か月前の末日にする。
　表示モードが週３日表示の場合
　表示対象年月日を3日前にする

次へボタン押下時
　表示モードが日曜始まり月表示の場合
　表示対象年月日を１か月後の同日にする。同日が存在しない場合には、１か月後の末日にする。
　表示モードが月曜始まり月表示の場合
　表示対象年月日を１か月後の同日にする。同日が存在しない場合には、１か月後の末日にする。
　表示モードが週３日表示の場合
　表示対象年月日を3日後にする

表示切替ボタン
　表示モードが、日曜始まり月表示の場合→表示モードを、月曜始まり月表示にする
　表示モードが、月曜始まり月表示の場合→表示モードを、週３日表示にする。
　表示モードが、週３日表示の場合→表示モードを、日曜始まり月表示にする。


－－－

フロントエンドからバックエンドへ、get-schedule を送信する際、開始日、終了日を入れるようにして。開始日には、表示開始年月日を入れて、終了日には表示終了年月日を入れて。
バックエンドは、開始日から終了日に掛かるものを返すようにして。


－－－

スケジュール管理のフロントエンドにコンポーネントを追加して欲しい。

DayBox.vue
親コンポーネントから以下の配列を受け取る
　年月日
　休日注釈（文字列）
　スケジュールのID
　タイトル
　終日フラグ
　開始日時
　期間
　TODO完了フラグ
　描画色

DayBox.vueでは、D3.jsを使って、箱を書く
デザインは
┌─────────┐
│　　　　日　　注釈│
│　　　　　　　　　│
│　　　　　　　　　│
│　　　　　　　　　│
│　　　　　　　　　│
│　　　　　　　　　│
└─────────┘

日は、指定された年月日の日の部分を出す
注釈は、休日注釈が指定された場合に、赤い箱で白抜き文字で出す

他の指定された値は、今は使用しない。

最終的に、画面に、横に７個、縦に最大で６段並べるので、見合うくらいの大きさで。

描画テスト用のページをviews下に、DayBoxTest.vueで作って。

－－－
間違えました。
DayBox.vueに渡すのは、
　年月日
　休日注釈（文字列）
　スケジュール情報として、以下の情報をひと固まりとして、その配列
　　スケジュールのID
　　タイトル
　　終日フラグ
　　開始日時
　　期間
　　TODO完了フラグ
　　描画色


－－－

DayBoxに渡しているScheduleInfoに、positionNumberを追加して。これは表示順で、必須項目としたいです。

－－－
DayBoxに渡しているScheduleInfoに、TODOフラグを追加して。これは必須項目としたいです。

－－－



DayBoxに、スケジュールの情報を表示する処理を追加したい。

positionNumber順に上から表示する。
positionNumberは、連番になっていない可能性もあり、番号が空いている場合は、表示の開ける。

表示する内容は、

isAllDayがTrueで、startDateTimeの年月が、DayBoxの年月と違う場合
　startDateTimeの年月+duration(日)が、DayBoxの日付と同じ場合は、→の矢印をcolorの色で引く
　つまり、
　│　　　　　│
　│--------→│
　という感じ
　→startDateTimeの年月+duration(日)が、DayBoxの日付と違く場合は、横線（矢印の矢尻がないイメージ）をcolorの色で引く
　つまり、
　│　　　　　│
　│----------│
　という感じ
isAllDayがTrueで、startDateTimeの年月が、DayBoxの年月と同じ場合は、←の矢印をcolorの色で引いて、その上に、titleの内容をcolorの色のフォントで書く
　つまり、
　│title 　　│
　│←--------│
　という感じ

以下は、isAllDayがFalseの場合
TODOのときは、先頭にチェックボックスを付ける。TODOではないときは付けない
続けて、isAllDayがFalseのときは、startDateTimeの時分を hh:mm の形で付ける。iAllDayがTrueのときは付けない
続けて、titleを書く
また、isTodoCompletedがTrueのときは、titleに取り消し線を付ける
フォント色は黒で、
背景色をcolorで付ける。左端をちょっと濃くして、文字部分はちょっと薄くして、括弧良い感じで。

---



チェックボックス、開始

